@model websergio.Models.Colonia

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Colonia</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Activo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Activo)
                    @Html.ValidationMessageFor(model => model.Activo, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div class="row h-100">
    <div class="col-md-3">
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Área</th>
                    <th>
                        <button type="button" id="btnGuarda" class="btn btn-sm btn-success">Guarda</button>
                    </th>
                </tr>
            </thead>
            <tbody id="divCoor">
            </tbody>
        </table>
    </div>
    <div class="col-md-9">
        <div id="map" style="height: 400px; width: 100%;"></div>
    </div>
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_KEY&libraries=drawing&callback=initMap" async defer></script>
    <script type="text/javascript">
        var areas = [];
        var map;
        var drawingManager;
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 19.27, lng: -98.90 },
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                zoom: 15,
                streetViewControl: false,
                zoomControl: true,
                disableDefaultUI: true
            });

            drawingManager = new google.maps.drawing.DrawingManager({
                drawingMode: google.maps.drawing.OverlayType.MARKER,
                drawingControl: true,
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: ['polygon']
                },
                markerOptions: { icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png' },
                circleOptions: {
                    fillColor: '#ffff00',
                    fillOpacity: 1,
                    strokeWeight: 5,
                    clickable: false,
                    editable: true,
                    zIndex: 1
                }
            });

            drawingManager.setMap(map);
            google.maps.event.addListener(drawingManager, 'polygoncomplete', getCoordinates);

            function getCoordinates(polygon) {
                var list = [];
                list = polygon.getPath()['i'];
                var area = { Id: 0, IdColonia: $('#Id').val(), Puntos: JSON.stringify(list), Activo: true };
                areas.push(area);
                listaAreas();
            }
        }

        $(document).ready(function () {
            $('#btnGuarda').click(guardaAreas);
            buscaAreas();
        });

        function buscaAreas() {
            if ($('#Id').val() != 0) {
                $.ajax({
                    type: 'get',
                    url: '/Area/GetByColonia/' + $('#Id').val(),
                    dataType: 'json',
                    success: function (valor) {
                        areas = valor;
                        listaAreas();
                        pintaAreas();
                    },
                    error: function (resp) {
                        console.log(JSON.stringify(resp));
                    }
                });
            }
        }

        function guardaAreas() {
            if (areas.length > 0) {
                $.ajax({
                    type: 'post',
                    url: '/Area/Create',
                    data: JSON.stringify(areas),
                    dataType: 'json',
                    contentType: 'application/json',
                    success: function (valor) {
                        console.log(valor);
                        buscaAreas();
                        alert('se ha guardado');
                    },
                    error: function (resp) {
                        console.log(JSON.stringify(resp));
                    }
                });
            }
        }

        function listaAreas() {
            var lineas = '';
            for (var i = 0; i < areas.length; i++) {
                lineas += '<tr><td>Area ' + (i + 1) + '</td><td><button type="button" class="btn btn-sm btn-danger"'
                    + ' onclick = "elimina(' + areas[i].Id + ')">-</button></td></tr>';
            }
            $('#divCoor').html(lineas);
        }

        function elimina(id) {
            initMap();
            var area = areas.filter(a => a.Id == id)[0];
            if (area.Id != 0) {
                $.ajax({
                    type: 'get',
                    url: '/Area/Delete/' + area.Id,
                    dataType: 'json',
                    success: function (valor) {
                        console.log(valor);
                    },
                    error: function (resp) {
                        console.log(JSON.stringify(resp));
                    }
                });
            }
            areas.splice(areas.indexOf(area), 1);
            listaAreas();
            pintaAreas();
        }

        function pintaAreas() {
            if (areas.length > 0) {
                areas.forEach(ele => {
                    var coor = eval('(' + ele.Puntos + ')');
                    var pol = new google.maps.Polygon({
                        paths: coor,
                        strokeColor: '#000000',
                        strokeOpacity: 0.8,
                        strokeWeight: 2,
                        fillColor: '#000000',
                        fillOpacity: 0.4
                    });
                    pol.setMap(map);
                });
            }
        }
    </script>
}

